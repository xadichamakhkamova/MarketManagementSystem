// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
)

const getDashboardReport = `-- name: GetDashboardReport :one
SELECT
    COALESCE(SUM(selling_price * units_sold), 0) :: BIGINT AS total_sales,
    COALESCE(SUM(cost_price * units_sold), 0) :: BIGINT AS total_cost_price,
    COALESCE(SUM((selling_price - cost_price) * units_sold), 0) :: BIGINT AS total_net_profit,
    COALESCE(SUM(units_sold), 0) :: BIGINT AS total_units_sold
FROM dashboard
`

type GetDashboardReportRow struct {
	TotalSales     int64
	TotalCostPrice int64
	TotalNetProfit int64
	TotalUnitsSold int64
}

func (q *Queries) GetDashboardReport(ctx context.Context) (GetDashboardReportRow, error) {
	row := q.db.QueryRowContext(ctx, getDashboardReport)
	var i GetDashboardReportRow
	err := row.Scan(
		&i.TotalSales,
		&i.TotalCostPrice,
		&i.TotalNetProfit,
		&i.TotalUnitsSold,
	)
	return i, err
}

const upsertProductSales = `-- name: UpsertProductSales :one
INSERT INTO dashboard (product_id, color, cost_price, selling_price) 
VALUES ($1, $2, $3, $4) 
RETURNING 'success' AS result
`

type UpsertProductSalesParams struct {
	ProductID    string
	Color        string
	CostPrice    int64
	SellingPrice int64
}

func (q *Queries) UpsertProductSales(ctx context.Context, arg UpsertProductSalesParams) (string, error) {
	row := q.db.QueryRowContext(ctx, upsertProductSales,
		arg.ProductID,
		arg.Color,
		arg.CostPrice,
		arg.SellingPrice,
	)
	var result string
	err := row.Scan(&result)
	return result, err
}
