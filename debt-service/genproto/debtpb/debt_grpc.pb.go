// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protos/debt.proto

package debtpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DebtService_CreateDebt_FullMethodName      = "/DebtService/CreateDebt"
	DebtService_UpdateDebt_FullMethodName      = "/DebtService/UpdateDebt"
	DebtService_DeleteDebt_FullMethodName      = "/DebtService/DeleteDebt"
	DebtService_GetDebtById_FullMethodName     = "/DebtService/GetDebtById"
	DebtService_GetDebtByFilter_FullMethodName = "/DebtService/GetDebtByFilter"
)

// DebtServiceClient is the client API for DebtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebtServiceClient interface {
	CreateDebt(ctx context.Context, in *CreateDebtReq, opts ...grpc.CallOption) (*DebtResp, error)
	UpdateDebt(ctx context.Context, in *UpdateDebtReq, opts ...grpc.CallOption) (*DebtResp, error)
	DeleteDebt(ctx context.Context, in *DeleteDebtReq, opts ...grpc.CallOption) (*DebtResp, error)
	GetDebtById(ctx context.Context, in *GetDebtByIdReq, opts ...grpc.CallOption) (*DebtResp, error)
	GetDebtByFilter(ctx context.Context, in *GetDebtByFilterReq, opts ...grpc.CallOption) (*GetDebtByFilterResp, error)
}

type debtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebtServiceClient(cc grpc.ClientConnInterface) DebtServiceClient {
	return &debtServiceClient{cc}
}

func (c *debtServiceClient) CreateDebt(ctx context.Context, in *CreateDebtReq, opts ...grpc.CallOption) (*DebtResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebtResp)
	err := c.cc.Invoke(ctx, DebtService_CreateDebt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debtServiceClient) UpdateDebt(ctx context.Context, in *UpdateDebtReq, opts ...grpc.CallOption) (*DebtResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebtResp)
	err := c.cc.Invoke(ctx, DebtService_UpdateDebt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debtServiceClient) DeleteDebt(ctx context.Context, in *DeleteDebtReq, opts ...grpc.CallOption) (*DebtResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebtResp)
	err := c.cc.Invoke(ctx, DebtService_DeleteDebt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debtServiceClient) GetDebtById(ctx context.Context, in *GetDebtByIdReq, opts ...grpc.CallOption) (*DebtResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebtResp)
	err := c.cc.Invoke(ctx, DebtService_GetDebtById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debtServiceClient) GetDebtByFilter(ctx context.Context, in *GetDebtByFilterReq, opts ...grpc.CallOption) (*GetDebtByFilterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDebtByFilterResp)
	err := c.cc.Invoke(ctx, DebtService_GetDebtByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebtServiceServer is the server API for DebtService service.
// All implementations must embed UnimplementedDebtServiceServer
// for forward compatibility.
type DebtServiceServer interface {
	CreateDebt(context.Context, *CreateDebtReq) (*DebtResp, error)
	UpdateDebt(context.Context, *UpdateDebtReq) (*DebtResp, error)
	DeleteDebt(context.Context, *DeleteDebtReq) (*DebtResp, error)
	GetDebtById(context.Context, *GetDebtByIdReq) (*DebtResp, error)
	GetDebtByFilter(context.Context, *GetDebtByFilterReq) (*GetDebtByFilterResp, error)
	mustEmbedUnimplementedDebtServiceServer()
}

// UnimplementedDebtServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDebtServiceServer struct{}

func (UnimplementedDebtServiceServer) CreateDebt(context.Context, *CreateDebtReq) (*DebtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebt not implemented")
}
func (UnimplementedDebtServiceServer) UpdateDebt(context.Context, *UpdateDebtReq) (*DebtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDebt not implemented")
}
func (UnimplementedDebtServiceServer) DeleteDebt(context.Context, *DeleteDebtReq) (*DebtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDebt not implemented")
}
func (UnimplementedDebtServiceServer) GetDebtById(context.Context, *GetDebtByIdReq) (*DebtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebtById not implemented")
}
func (UnimplementedDebtServiceServer) GetDebtByFilter(context.Context, *GetDebtByFilterReq) (*GetDebtByFilterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebtByFilter not implemented")
}
func (UnimplementedDebtServiceServer) mustEmbedUnimplementedDebtServiceServer() {}
func (UnimplementedDebtServiceServer) testEmbeddedByValue()                     {}

// UnsafeDebtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebtServiceServer will
// result in compilation errors.
type UnsafeDebtServiceServer interface {
	mustEmbedUnimplementedDebtServiceServer()
}

func RegisterDebtServiceServer(s grpc.ServiceRegistrar, srv DebtServiceServer) {
	// If the following call pancis, it indicates UnimplementedDebtServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DebtService_ServiceDesc, srv)
}

func _DebtService_CreateDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebtServiceServer).CreateDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebtService_CreateDebt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebtServiceServer).CreateDebt(ctx, req.(*CreateDebtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebtService_UpdateDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDebtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebtServiceServer).UpdateDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebtService_UpdateDebt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebtServiceServer).UpdateDebt(ctx, req.(*UpdateDebtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebtService_DeleteDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDebtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebtServiceServer).DeleteDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebtService_DeleteDebt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebtServiceServer).DeleteDebt(ctx, req.(*DeleteDebtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebtService_GetDebtById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebtByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebtServiceServer).GetDebtById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebtService_GetDebtById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebtServiceServer).GetDebtById(ctx, req.(*GetDebtByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebtService_GetDebtByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebtByFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebtServiceServer).GetDebtByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebtService_GetDebtByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebtServiceServer).GetDebtByFilter(ctx, req.(*GetDebtByFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DebtService_ServiceDesc is the grpc.ServiceDesc for DebtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DebtService",
	HandlerType: (*DebtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDebt",
			Handler:    _DebtService_CreateDebt_Handler,
		},
		{
			MethodName: "UpdateDebt",
			Handler:    _DebtService_UpdateDebt_Handler,
		},
		{
			MethodName: "DeleteDebt",
			Handler:    _DebtService_DeleteDebt_Handler,
		},
		{
			MethodName: "GetDebtById",
			Handler:    _DebtService_GetDebtById_Handler,
		},
		{
			MethodName: "GetDebtByFilter",
			Handler:    _DebtService_GetDebtByFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/debt.proto",
}
